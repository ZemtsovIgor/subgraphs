// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CharitySent extends ethereum.Event {
  get params(): CharitySent__Params {
    return new CharitySent__Params(this);
  }
}

export class CharitySent__Params {
  _event: CharitySent;

  constructor(event: CharitySent) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get table(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DonationReferralRewardSent extends ethereum.Event {
  get params(): DonationReferralRewardSent__Params {
    return new DonationReferralRewardSent__Params(this);
  }
}

export class DonationReferralRewardSent__Params {
  _event: DonationReferralRewardSent;

  constructor(event: DonationReferralRewardSent) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get table(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DonationRewardSent extends ethereum.Event {
  get params(): DonationRewardSent__Params {
    return new DonationRewardSent__Params(this);
  }
}

export class DonationRewardSent__Params {
  _event: DonationRewardSent;

  constructor(event: DonationRewardSent) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get table(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class InvestmentReceived extends ethereum.Event {
  get params(): InvestmentReceived__Params {
    return new InvestmentReceived__Params(this);
  }
}

export class InvestmentReceived__Params {
  _event: InvestmentReceived;

  constructor(event: InvestmentReceived) {
    this._event = event;
  }

  get table(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ReferralRewardSent extends ethereum.Event {
  get params(): ReferralRewardSent__Params {
    return new ReferralRewardSent__Params(this);
  }
}

export class ReferralRewardSent__Params {
  _event: ReferralRewardSent;

  constructor(event: ReferralRewardSent) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get table(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UserVerification extends ethereum.Event {
  get params(): UserVerification__Params {
    return new UserVerification__Params(this);
  }
}

export class UserVerification__Params {
  _event: UserVerification;

  constructor(event: UserVerification) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class GAME__infoResultValue0Struct extends ethereum.Tuple {
  get ID(): BigInt {
    return this[0].toBigInt();
  }

  get table(): BigInt {
    return this[1].toBigInt();
  }

  get parentID(): BigInt {
    return this[2].toBigInt();
  }

  get refSum(): BigInt {
    return this[3].toBigInt();
  }

  get donationSum(): BigInt {
    return this[4].toBigInt();
  }

  get donationRefSum(): BigInt {
    return this[5].toBigInt();
  }

  get parent(): Address {
    return this[6].toAddress();
  }
}

export class GAME__infoTableResultValue0Struct extends ethereum.Tuple {
  get addressesCount(): BigInt {
    return this[0].toBigInt();
  }

  get donationsCountReceivedAlready(): BigInt {
    return this[1].toBigInt();
  }

  get refSum(): BigInt {
    return this[2].toBigInt();
  }

  get donationSum(): BigInt {
    return this[3].toBigInt();
  }

  get donationRefSum(): BigInt {
    return this[4].toBigInt();
  }
}

export class GAME__tablesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class GAME extends ethereum.SmartContract {
  static bind(address: Address): GAME {
    return new GAME("GAME", address);
  }

  DEFAULT_VERIFICATION_COST(): BigInt {
    let result = super.call(
      "DEFAULT_VERIFICATION_COST",
      "DEFAULT_VERIFICATION_COST():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_DEFAULT_VERIFICATION_COST(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "DEFAULT_VERIFICATION_COST",
      "DEFAULT_VERIFICATION_COST():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addressToId(param0: Address): BigInt {
    let result = super.call("addressToId", "addressToId(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_addressToId(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addressToId",
      "addressToId(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addressToTable(param0: Address): BigInt {
    let result = super.call(
      "addressToTable",
      "addressToTable(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_addressToTable(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addressToTable",
      "addressToTable(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  busdToken(): Address {
    let result = super.call("busdToken", "busdToken():(address)", []);

    return result[0].toAddress();
  }

  try_busdToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("busdToken", "busdToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  charityAddress(): Address {
    let result = super.call("charityAddress", "charityAddress():(address)", []);

    return result[0].toAddress();
  }

  try_charityAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "charityAddress",
      "charityAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  charityMatrix(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "charityMatrix",
      "charityMatrix(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_charityMatrix(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "charityMatrix",
      "charityMatrix(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  counter(): BigInt {
    let result = super.call("counter", "counter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_counter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("counter", "counter():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  donationMatrix(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "donationMatrix",
      "donationMatrix(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_donationMatrix(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "donationMatrix",
      "donationMatrix(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  donationRefMatrix(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "donationRefMatrix",
      "donationRefMatrix(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_donationRefMatrix(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "donationRefMatrix",
      "donationRefMatrix(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  donationRefSum(param0: Address): BigInt {
    let result = super.call(
      "donationRefSum",
      "donationRefSum(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_donationRefSum(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "donationRefSum",
      "donationRefSum(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  donationRefTableSum(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "donationRefTableSum",
      "donationRefTableSum(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_donationRefTableSum(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "donationRefTableSum",
      "donationRefTableSum(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  donationSum(param0: Address): BigInt {
    let result = super.call("donationSum", "donationSum(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_donationSum(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "donationSum",
      "donationSum(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  donationTableSum(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "donationTableSum",
      "donationTableSum(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_donationTableSum(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "donationTableSum",
      "donationTableSum(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  donationsCountReceivedAlready(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "donationsCountReceivedAlready",
      "donationsCountReceivedAlready(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_donationsCountReceivedAlready(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "donationsCountReceivedAlready",
      "donationsCountReceivedAlready(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTableAddressesCount(tableNum: BigInt): BigInt {
    let result = super.call(
      "getTableAddressesCount",
      "getTableAddressesCount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tableNum)]
    );

    return result[0].toBigInt();
  }

  try_getTableAddressesCount(tableNum: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTableAddressesCount",
      "getTableAddressesCount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tableNum)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTableThreshold(tableNum: BigInt): BigInt {
    let result = super.call(
      "getTableThreshold",
      "getTableThreshold(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tableNum)]
    );

    return result[0].toBigInt();
  }

  try_getTableThreshold(tableNum: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTableThreshold",
      "getTableThreshold(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tableNum)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTablesCount(): BigInt {
    let result = super.call("getTablesCount", "getTablesCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTablesCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTablesCount",
      "getTablesCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  info(customer: Address): GAME__infoResultValue0Struct {
    let result = super.call(
      "info",
      "info(address):((uint256,uint256,uint256,uint256,uint256,uint256,address))",
      [ethereum.Value.fromAddress(customer)]
    );

    return result[0].toTuple() as GAME__infoResultValue0Struct;
  }

  try_info(
    customer: Address
  ): ethereum.CallResult<GAME__infoResultValue0Struct> {
    let result = super.tryCall(
      "info",
      "info(address):((uint256,uint256,uint256,uint256,uint256,uint256,address))",
      [ethereum.Value.fromAddress(customer)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as GAME__infoResultValue0Struct
    );
  }

  infoTable(
    tableNum: BigInt,
    customer: Address
  ): GAME__infoTableResultValue0Struct {
    let result = super.call(
      "infoTable",
      "infoTable(uint256,address):((uint256,uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromUnsignedBigInt(tableNum),
        ethereum.Value.fromAddress(customer)
      ]
    );

    return result[0].toTuple() as GAME__infoTableResultValue0Struct;
  }

  try_infoTable(
    tableNum: BigInt,
    customer: Address
  ): ethereum.CallResult<GAME__infoTableResultValue0Struct> {
    let result = super.tryCall(
      "infoTable",
      "infoTable(uint256,address):((uint256,uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromUnsignedBigInt(tableNum),
        ethereum.Value.fromAddress(customer)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as GAME__infoTableResultValue0Struct
    );
  }

  inviters(param0: Address): Address {
    let result = super.call("inviters", "inviters(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_inviters(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("inviters", "inviters(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  matrix(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call("matrix", "matrix(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toBigInt();
  }

  try_matrix(param0: BigInt, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("matrix", "matrix(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  random(max: BigInt, salt: BigInt): BigInt {
    let result = super.call("random", "random(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(max),
      ethereum.Value.fromUnsignedBigInt(salt)
    ]);

    return result[0].toBigInt();
  }

  try_random(max: BigInt, salt: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("random", "random(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(max),
      ethereum.Value.fromUnsignedBigInt(salt)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  refMatrix(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "refMatrix",
      "refMatrix(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_refMatrix(param0: BigInt, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "refMatrix",
      "refMatrix(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  refSum(param0: Address): BigInt {
    let result = super.call("refSum", "refSum(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_refSum(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("refSum", "refSum(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  refTableSum(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "refTableSum",
      "refTableSum(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_refTableSum(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "refTableSum",
      "refTableSum(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rootAddress(): Address {
    let result = super.call("rootAddress", "rootAddress():(address)", []);

    return result[0].toAddress();
  }

  try_rootAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("rootAddress", "rootAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tableAddresses(param0: BigInt, param1: BigInt): Address {
    let result = super.call(
      "tableAddresses",
      "tableAddresses(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_tableAddresses(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tableAddresses",
      "tableAddresses(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tables(param0: BigInt): GAME__tablesResult {
    let result = super.call(
      "tables",
      "tables(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new GAME__tablesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_tables(param0: BigInt): ethereum.CallResult<GAME__tablesResult> {
    let result = super.tryCall(
      "tables",
      "tables(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GAME__tablesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  valueToTable(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "valueToTable",
      "valueToTable(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_valueToTable(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "valueToTable",
      "valueToTable(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  verificationCost(): BigInt {
    let result = super.call(
      "verificationCost",
      "verificationCost():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_verificationCost(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "verificationCost",
      "verificationCost():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  verifications(param0: Address): boolean {
    let result = super.call("verifications", "verifications(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_verifications(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verifications",
      "verifications(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get root(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get charity(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _busdToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AppendTableCall extends ethereum.Call {
  get inputs(): AppendTableCall__Inputs {
    return new AppendTableCall__Inputs(this);
  }

  get outputs(): AppendTableCall__Outputs {
    return new AppendTableCall__Outputs(this);
  }
}

export class AppendTableCall__Inputs {
  _call: AppendTableCall;

  constructor(call: AppendTableCall) {
    this._call = call;
  }

  get thValue(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get charityShare(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get refShare(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get donationsCount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get donationShare(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get refDonationShare(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get maxDonationsCount(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get forceRebuildJUmpValues(): boolean {
    return this._call.inputValues[7].value.toBoolean();
  }
}

export class AppendTableCall__Outputs {
  _call: AppendTableCall;

  constructor(call: AppendTableCall) {
    this._call = call;
  }
}

export class BuyCall extends ethereum.Call {
  get inputs(): BuyCall__Inputs {
    return new BuyCall__Inputs(this);
  }

  get outputs(): BuyCall__Outputs {
    return new BuyCall__Outputs(this);
  }
}

export class BuyCall__Inputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }

  get _inviter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class BuyCall__Outputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }
}

export class RebuildJumpValuesCall extends ethereum.Call {
  get inputs(): RebuildJumpValuesCall__Inputs {
    return new RebuildJumpValuesCall__Inputs(this);
  }

  get outputs(): RebuildJumpValuesCall__Outputs {
    return new RebuildJumpValuesCall__Outputs(this);
  }
}

export class RebuildJumpValuesCall__Inputs {
  _call: RebuildJumpValuesCall;

  constructor(call: RebuildJumpValuesCall) {
    this._call = call;
  }
}

export class RebuildJumpValuesCall__Outputs {
  _call: RebuildJumpValuesCall;

  constructor(call: RebuildJumpValuesCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetCostCall extends ethereum.Call {
  get inputs(): SetCostCall__Inputs {
    return new SetCostCall__Inputs(this);
  }

  get outputs(): SetCostCall__Outputs {
    return new SetCostCall__Outputs(this);
  }
}

export class SetCostCall__Inputs {
  _call: SetCostCall;

  constructor(call: SetCostCall) {
    this._call = call;
  }

  get _cost(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCostCall__Outputs {
  _call: SetCostCall;

  constructor(call: SetCostCall) {
    this._call = call;
  }
}

export class SetNewCharityAddressCall extends ethereum.Call {
  get inputs(): SetNewCharityAddressCall__Inputs {
    return new SetNewCharityAddressCall__Inputs(this);
  }

  get outputs(): SetNewCharityAddressCall__Outputs {
    return new SetNewCharityAddressCall__Outputs(this);
  }
}

export class SetNewCharityAddressCall__Inputs {
  _call: SetNewCharityAddressCall;

  constructor(call: SetNewCharityAddressCall) {
    this._call = call;
  }

  get newCharityAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetNewCharityAddressCall__Outputs {
  _call: SetNewCharityAddressCall;

  constructor(call: SetNewCharityAddressCall) {
    this._call = call;
  }
}

export class SetNewRootAddressCall extends ethereum.Call {
  get inputs(): SetNewRootAddressCall__Inputs {
    return new SetNewRootAddressCall__Inputs(this);
  }

  get outputs(): SetNewRootAddressCall__Outputs {
    return new SetNewRootAddressCall__Outputs(this);
  }
}

export class SetNewRootAddressCall__Inputs {
  _call: SetNewRootAddressCall;

  constructor(call: SetNewRootAddressCall) {
    this._call = call;
  }

  get newRootAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetNewRootAddressCall__Outputs {
  _call: SetNewRootAddressCall;

  constructor(call: SetNewRootAddressCall) {
    this._call = call;
  }
}

export class SetTableParamsCall extends ethereum.Call {
  get inputs(): SetTableParamsCall__Inputs {
    return new SetTableParamsCall__Inputs(this);
  }

  get outputs(): SetTableParamsCall__Outputs {
    return new SetTableParamsCall__Outputs(this);
  }
}

export class SetTableParamsCall__Inputs {
  _call: SetTableParamsCall;

  constructor(call: SetTableParamsCall) {
    this._call = call;
  }

  get thValue(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get num(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get charityShare(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get refShare(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get donationsCount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get donationShare(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get refDonationShare(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get maxDonationsCount(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get forceRebuildJUmpValues(): boolean {
    return this._call.inputValues[8].value.toBoolean();
  }
}

export class SetTableParamsCall__Outputs {
  _call: SetTableParamsCall;

  constructor(call: SetTableParamsCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class VerificationCall extends ethereum.Call {
  get inputs(): VerificationCall__Inputs {
    return new VerificationCall__Inputs(this);
  }

  get outputs(): VerificationCall__Outputs {
    return new VerificationCall__Outputs(this);
  }
}

export class VerificationCall__Inputs {
  _call: VerificationCall;

  constructor(call: VerificationCall) {
    this._call = call;
  }
}

export class VerificationCall__Outputs {
  _call: VerificationCall;

  constructor(call: VerificationCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawTokenCall extends ethereum.Call {
  get inputs(): WithdrawTokenCall__Inputs {
    return new WithdrawTokenCall__Inputs(this);
  }

  get outputs(): WithdrawTokenCall__Outputs {
    return new WithdrawTokenCall__Outputs(this);
  }
}

export class WithdrawTokenCall__Inputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }

  get tokenContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawTokenCall__Outputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }
}
