// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Contract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Contract entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Contract entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Contract", id.toString(), this);
  }

  static load(id: string): Contract | null {
    return store.get("Contract", id) as Contract | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalHits(): BigInt {
    let value = this.get("totalHits");
    return value.toBigInt();
  }

  set totalHits(value: BigInt) {
    this.set("totalHits", Value.fromBigInt(value));
  }
}

export class Customer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Customer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Customer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Customer", id.toString(), this);
  }

  static load(id: string): Customer | null {
    return store.get("Customer", id) as Customer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get verified(): boolean {
    let value = this.get("verified");
    return value.toBoolean();
  }

  set verified(value: boolean) {
    this.set("verified", Value.fromBoolean(value));
  }

  get currentTable(): BigInt {
    let value = this.get("currentTable");
    return value.toBigInt();
  }

  set currentTable(value: BigInt) {
    this.set("currentTable", Value.fromBigInt(value));
  }

  get myID(): BigInt {
    let value = this.get("myID");
    return value.toBigInt();
  }

  set myID(value: BigInt) {
    this.set("myID", Value.fromBigInt(value));
  }

  get inviterID(): BigInt {
    let value = this.get("inviterID");
    return value.toBigInt();
  }

  set inviterID(value: BigInt) {
    this.set("inviterID", Value.fromBigInt(value));
  }

  get totalHits(): BigInt {
    let value = this.get("totalHits");
    return value.toBigInt();
  }

  set totalHits(value: BigInt) {
    this.set("totalHits", Value.fromBigInt(value));
  }

  get inviterRewards(): Array<string> {
    let value = this.get("inviterRewards");
    return value.toStringArray();
  }

  set inviterRewards(value: Array<string>) {
    this.set("inviterRewards", Value.fromStringArray(value));
  }

  get winnerRewards(): Array<string> {
    let value = this.get("winnerRewards");
    return value.toStringArray();
  }

  set winnerRewards(value: Array<string>) {
    this.set("winnerRewards", Value.fromStringArray(value));
  }

  get winnerInviterRewards(): Array<string> {
    let value = this.get("winnerInviterRewards");
    return value.toStringArray();
  }

  set winnerInviterRewards(value: Array<string>) {
    this.set("winnerInviterRewards", Value.fromStringArray(value));
  }
}

export class TableHits extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TableHits entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TableHits entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TableHits", id.toString(), this);
  }

  static load(id: string): TableHits | null {
    return store.get("TableHits", id) as TableHits | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tableNum(): BigInt {
    let value = this.get("tableNum");
    return value.toBigInt();
  }

  set tableNum(value: BigInt) {
    this.set("tableNum", Value.fromBigInt(value));
  }

  get inviterAddress(): string {
    let value = this.get("inviterAddress");
    return value.toString();
  }

  set inviterAddress(value: string) {
    this.set("inviterAddress", Value.fromString(value));
  }

  get inviterReward(): BigInt {
    let value = this.get("inviterReward");
    return value.toBigInt();
  }

  set inviterReward(value: BigInt) {
    this.set("inviterReward", Value.fromBigInt(value));
  }

  get winnerAddress(): string {
    let value = this.get("winnerAddress");
    return value.toString();
  }

  set winnerAddress(value: string) {
    this.set("winnerAddress", Value.fromString(value));
  }

  get winnerReward(): BigInt {
    let value = this.get("winnerReward");
    return value.toBigInt();
  }

  set winnerReward(value: BigInt) {
    this.set("winnerReward", Value.fromBigInt(value));
  }

  get winnerInviterAddress(): string {
    let value = this.get("winnerInviterAddress");
    return value.toString();
  }

  set winnerInviterAddress(value: string) {
    this.set("winnerInviterAddress", Value.fromString(value));
  }

  get winnerInviterReward(): BigInt {
    let value = this.get("winnerInviterReward");
    return value.toBigInt();
  }

  set winnerInviterReward(value: BigInt) {
    this.set("winnerInviterReward", Value.fromBigInt(value));
  }
}
